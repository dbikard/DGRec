# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/02_utils.ipynb.

# %% auto 0
__all__ = ['aligner', 'align2mut', 'mut_rix', 'get_mutations', 'align_to_mut', 'get_mutations_new', 'mut_to_str', 'str_to_mut',
           'parse_genotypes', 'downsample_fastq_gz']

# %% ../nbs/API/02_utils.ipynb 2
import gzip
import itertools
import os
import csv
from . import pairwise2
from .pairwise2 import format_alignment
from Bio.Align import PairwiseAligner

# %% ../nbs/API/02_utils.ipynb 4
def align2mut(align):
    """Converts a sequence alignment result from Bio.pairwise2.Align.globalms into a list of mutations.
    Positions are those of the alignment."""
    res=[]
    for i in range(align.end):
        if align.seqA[i]!=align.seqB[i]:
            mut=(align.seqA[i],i,align.seqB[i])
            res.append(mut)
    return res

# %% ../nbs/API/02_utils.ipynb 6
def mut_rix(mutations):
    """Reindexes the positions of the mutations to go from 
    their position in the sequence alignment to their position in the original sequence."""
    ph=0
    res_rix=[]
    for mut in mutations:
        rix=mut[1]+ph
        res_rix.append((mut[0],rix,mut[2]))
        if mut[0]=='-':
            ph-=1
            
    return res_rix

# %% ../nbs/API/02_utils.ipynb 8
def get_mutations(seqA,seqB):
    """Aligns two sequences and returns a genotype string.
    The string is a comma separated list of mutations.
    """
    align=pairwise2.align.globalms(seqA,seqB, 2, -1, -1, -.5, one_alignment_only=True)[0]
    mutations=align2mut(align) 
    mutations=mut_rix(mutations)
    return mutations

# %% ../nbs/API/02_utils.ipynb 10
def align_to_mut(alignment):
    muts=[]
    p=0
    for i in range(alignment.indices.shape[1]):
        if alignment.indices[0][i]==-1:
            muts.append(["-",p,alignment.query[alignment.indices[1][i]]])
        elif alignment.indices[1][i]==-1:
            p=alignment.indices[0][i]
            muts.append([alignment.target[alignment.indices[0][i]],p,"-"])
        elif alignment.target[alignment.indices[0][i]]!=alignment.query[alignment.indices[1][i]]:
            p=alignment.indices[0][i]
            muts.append([alignment.target[alignment.indices[0][i]],p,alignment.query[alignment.indices[1][i]]])
        else:
            p=alignment.indices[0][i]
    return muts

# %% ../nbs/API/02_utils.ipynb 12
aligner=PairwiseAligner()
aligner.mode = 'global'
aligner.match_score = 2
aligner.mismatch_score = -1
aligner.open_gap_score = -1
aligner.extend_gap_score = -0.5

def get_mutations_new(seqA,seqB):
    """Aligns two sequences and returns a genotype string.
    The string is a comma separated list of mutations.
    """
    alignments = aligner.align(seqA, seqB)
    align = alignments[0]
    mutations=align_to_mut(align) 
    return mutations

# %% ../nbs/API/02_utils.ipynb 16
def mut_to_str(mutations: list):
    """Converts list of mutations to a comma separated string"""
    mut_str_list=[''.join(map(str,mut)) for mut in mutations]
    mut_str=','.join(mut_str_list)
    return mut_str

# %% ../nbs/API/02_utils.ipynb 18
def str_to_mut(gen: str):
    """Converts genotype string to a list of mutations"""
    mutations=[]
    g=gen.split(',')
    for mut in g:
        mut_from=mut[0]
        ix=int(mut[1:-1])
        mut_to=mut[-1]
        mutations.append([mut_from,ix,mut_to])

    return mutations

# %% ../nbs/API/02_utils.ipynb 20
def parse_genotypes(genotypes_file):
    gen_list=[]
    with open(genotypes_file,"r") as handle: 
        reader = csv.reader(handle, delimiter='\t')
        for row in reader:
            gen_list.append((row[0],int(row[1])))
    return gen_list

# %% ../nbs/API/02_utils.ipynb 23
def downsample_fastq_gz(input_file, output_file, num_reads=10000):
    """Downsamples a compressed FASTQ file to the specified number of reads.

    Args:
        input_file (str): Path to the input FASTQ.gz file.
        output_file (str): Path to the output FASTQ.gz file.
        num_reads (int, optional): Number of reads to keep. Defaults to 10000.
    """

    with gzip.open(input_file, 'rb') as infile, gzip.open(output_file, 'wb') as outfile:
        lines = itertools.islice(infile, num_reads * 4)  # Read 4 lines (1 read) at a time
        for line in lines:
            outfile.write(line)
