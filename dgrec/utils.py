# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/02_utils.ipynb.

# %% auto 0
__all__ = ['mut_to_str', 'str_to_mut', 'parse_genotypes', 'downsample_fastq_gz']

# %% ../nbs/API/02_utils.ipynb 2
import gzip
import itertools
import os
import csv
from Bio import pairwise2
from Bio.pairwise2 import format_alignment

# %% ../nbs/API/02_utils.ipynb 3
def mut_to_str(mutations: list):
    """Converts list of mutations to a comma separated string"""
    mut_str_list=[''.join(map(str,mut)) for mut in mutations]
    mut_str=','.join(mut_str_list)
    return mut_str

# %% ../nbs/API/02_utils.ipynb 5
def str_to_mut(gen: str):
    """Converts genotype string to a list of mutations"""
    mutations=[]
    g=gen.split(',')
    for mut in g:
        mut_from=mut[0]
        ix=int(mut[1:-1])
        mut_to=mut[-1]
        mutations.append([mut_from,ix,mut_to])

    return mutations

# %% ../nbs/API/02_utils.ipynb 7
def parse_genotypes(genotypes_file):
    gen_list=[]
    with open(genotypes_file,"r") as handle: 
        reader = csv.reader(handle, delimiter='\t')
        for row in reader:
            gen_list.append((row[0],int(row[1])))
    return gen_list

# %% ../nbs/API/02_utils.ipynb 10
def downsample_fastq_gz(input_file, output_file, num_reads=10000):
    """Downsamples a compressed FASTQ file to the specified number of reads.

    Args:
        input_file (str): Path to the input FASTQ.gz file.
        output_file (str): Path to the output FASTQ.gz file.
        num_reads (int, optional): Number of reads to keep. Defaults to 10000.
    """

    with gzip.open(input_file, 'rb') as infile, gzip.open(output_file, 'wb') as outfile:
        lines = itertools.islice(infile, num_reads * 4)  # Read 4 lines (1 read) at a time
        for line in lines:
            outfile.write(line)
